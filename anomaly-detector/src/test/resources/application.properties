spring.cloud.stream.binders.kafka.type=kstream
spring.cloud.stream.binders.kafka.environment.spring.cloud.stream.kafka.streams.binder.brokers=localhost:29092
spring.kafka.streams.properties.spring.json.use.type.headers=false
spring.cloud.stream.kafka.streams.binder.deserialization-exception-handler=logandcontinue

spring.cloud.stream.function.definition=anomalyDetectorProcessor

spring.cloud.stream.kafka.streams.binder.functions.anomalyDetectorProcessor.application-id=anomaly-detector
spring.cloud.stream.bindings.anomalyDetectorProcessor-in-0.content-type=application/json
spring.cloud.stream.bindings.anomalyDetectorProcessor-in-0.destination=temperature-measurements
spring.cloud.stream.bindings.anomalyDetectorProcessor-in-0.binder=kafka

spring.cloud.stream.bindings.anomalyDetectorProcessor-out-0.content-type=application/json
spring.cloud.stream.bindings.anomalyDetectorProcessor-out-0.destination=temperature-anomalies
spring.cloud.stream.bindings.anomalyDetectorProcessor-out-0.binder=kafka

###

spring.cloud.stream.bindings.anomalyDetectorProcessor-in-1.content-type=application/json
spring.cloud.stream.bindings.anomalyDetectorProcessor-in-1.destination=temperature-measurements-1
spring.cloud.stream.bindings.anomalyDetectorProcessor-in-1.binder=kafka

spring.cloud.stream.bindings.anomalyDetectorProcessor-out-1.content-type=application/json
spring.cloud.stream.bindings.anomalyDetectorProcessor-out-1.destination=temperature-anomalies-1
spring.cloud.stream.bindings.anomalyDetectorProcessor-out-1.binder=kafka

# Select one of these algorithms (algorithmOne, algorithmTwo, alwaysAlgorithm)
# This is common property, I personally created few custom app.properties to use different configuration based on the tested class
anomaly.algorithm=alwaysAlgorithm